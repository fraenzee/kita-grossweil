---
const slides = Astro.props.slides ?? [];
---
<div class="carousel relative w-full overflow-hidden bg-adobelightblue rounded-2xl shadow-md">
  <!-- Slides -->
  <div class="slides w-full h-64 md:h-96 relative">
    {slides.map((slide, idx) => (
      <div class={`slide absolute inset-0 transition-opacity duration-700 ease-in-out ${idx === 0 ? 'opacity-100' : 'opacity-0'}`}>
        <img src={slide} alt={`Slide ${idx + 1}`} class="w-full h-full object-cover rounded-2xl" />
      </div>
    ))}
  </div>

  <!-- Buttons -->
  <button class="prev absolute top-1/2 left-4 -translate-y-1/2 bg-adobepink text-adobewhite p-3 rounded-full shadow hover:bg-adobeyellow transition">‹</button>
  <button class="next absolute top-1/2 right-4 -translate-y-1/2 bg-adobepink text-adobewhite p-3 rounded-full shadow hover:bg-adobeyellow transition">›</button>

  <!-- Dots -->
  <div class="dots absolute bottom-4 w-full flex justify-center gap-2"></div>
</div>

<script type="module">
const carousel = document.querySelector('.carousel');
const slidesEl = carousel.querySelectorAll('.slide');
const prevBtn = carousel.querySelector('.prev');
const nextBtn = carousel.querySelector('.next');
const dotsEl = carousel.querySelector('.dots');

let current = 0;
let interval;
let startX = 0;
let endX = 0;

// Slide anzeigen
function showSlide(i) {
  slidesEl.forEach((slide, idx) => {
    slide.classList.toggle('opacity-100', idx === i);
    slide.classList.toggle('opacity-0', idx !== i);
  });
  current = i;
  updateDots();
}

// Nächster / vorheriger Slide
function nextSlide() { showSlide((current + 1) % slidesEl.length); }
function prevSlide() { showSlide((current - 1 + slidesEl.length) % slidesEl.length); }

// Dots erstellen
slidesEl.forEach((_, idx) => {
  const dot = document.createElement('button');
  dot.className = 'w-3 h-3 rounded-full bg-adobelightyellow transition';
  dot.addEventListener('click', () => showSlide(idx));
  dotsEl.appendChild(dot);
});

// Dots aktualisieren
function updateDots() {
  dotsEl.childNodes.forEach((dot, idx) => {
    dot.classList.toggle('bg-adobepink', idx === current);
    dot.classList.toggle('bg-adobelightyellow', idx !== current);
  });
}

// Button Events
prevBtn.addEventListener('click', prevSlide);
nextBtn.addEventListener('click', nextSlide);

// Autoplay
function startAutoplay() { interval = setInterval(nextSlide, 5000); }
function stopAutoplay() { clearInterval(interval); }

carousel.addEventListener('mouseenter', stopAutoplay);
carousel.addEventListener('mouseleave', startAutoplay);

// Touch Events für Swipe
const slidesContainer = carousel.querySelector('.slides');

slidesContainer.addEventListener('touchstart', (e) => {
  startX = e.touches[0].clientX;
});

slidesContainer.addEventListener('touchmove', (e) => {
  endX = e.touches[0].clientX;
});

slidesContainer.addEventListener('touchend', () => {
  const delta = startX - endX;
  if (delta > 50) nextSlide();       // Swipe nach links
  else if (delta < -50) prevSlide(); // Swipe nach rechts
  startX = 0;
  endX = 0;
});

// Initialisierung
showSlide(0);
startAutoplay();
</script>
